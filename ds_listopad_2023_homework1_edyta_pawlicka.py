# -*- coding: utf-8 -*-
"""ds-listopad-2023-homework1-Edyta-Pawlicka.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jnrDwRdnn3E0dANwWnjG9EdzsFuyP0a2

**Zadanie domowe - dzień 1**

Wejdź na stronę Głównego Urzędu Statystycznego - Bank Danych Lokalnych i znajdź interesujący ciebie zbiór danych który ma więcej niż 100 rekordów. Pobierz dane w formacie XLS i wczytaj je przy pomocy pakietu pandas (czasami będziesz zmuszony doinstalować paczkę openpyxl). W trakcie wczytywania danych możesz napotkać różne problemy, wypisz je w formie notatek, nawet jeśli później je rozwiążesz.
Po wczytaniu danych:

Sprawdź informacje o danych i opisz je przy pomocy metod info() oraz describe().
Sprawdź czy w zbiorze występują brakujące dane, jeśli tak, to usuń rekordy z nimi.
Sprawdź, czy w zbiorze występują duplikaty. Jeśli tak, to je usuń.
Wyświetl wybrany wiersz albo grupę wierszy z ramki danych (metoda nie ma znaczenia).
Przesortuj dane względem wybranej kolumny, wyświetl 5 pierwszych wierszy i 5 ostatnich wierszy (w dwóch oddzielnych komórkach).
Stwórz wykres dla wybranej kolumny (kolumn), nie ma znaczenia jaki to będzie wykres.
Stwórz bazę danych sqlite3 i tabelę do której zapiszesz dane.
Zapisz dane do stworzonej tabeli.
"""

from google.colab import drive

drive.mount('/content/drive')

import pandas as pd

XLSX_FILE = '/content/drive/MyDrive/DataScience/data/Zatrudnieni_wg_sekcji_sektorówwlasnosci_plci.xlsx'

# select correct sheet name
df = pd.read_excel(XLSX_FILE, sheet_name=1)

df.info()

df.describe()

df.isnull()

len(df)

df.nunique()

df.drop(['Jednostka miary', 'Atrybut'], axis=1, inplace=True)

# no duplicates
len(df.drop_duplicates()) == len(df)

df.sample(5)

df_poland = df.query("Nazwa == 'POLSKA'")

df_poland

DICTIONARY = '/content/drive/MyDrive/DataScience/data/slownik_sekcji.xlsx'

df_dict = pd.read_excel(DICTIONARY, sheet_name=0)

df_dict.head(2)

# dołączam słownik dla sekcji

df_full = df_poland.merge(df_dict, how='left', left_on='Sekcje wg PKD 2007', right_on='Sekcje wg PKD 2007')

df_full.head()

df_full.info()

# nie chcę widzieć wierszy, gdzie są dane dla 'ogółem'

sektory_condition = df_full['Sektory własności'] != 'ogółem'
plec_condition = df_full['Płeć'] != 'ogółem'
sekcje_condition = df_full['Sekcje wg PKD 2007'] != 'ogółem'

df_filtered = df_full[sektory_condition & plec_condition & sekcje_condition]

df_filtered.head()

df_fin = df_filtered.reset_index()

df_fin.head()

df_fin.drop(['index', 'Kod'], axis=1, inplace=True)

df_fin.head()

# sortowanie po kolumnie
df_sort = df_fin.sort_values(by=['Wartosc'], ascending=False)

# 5 pierwszych
df_sort.head()

#5 ostatnich
df_sort.tail()

df_sort.info()

# zmieniam typy danych object

df_convert = df_sort.convert_dtypes()

df_convert.info()

"""Stwórz wykres dla wybranej kolumny (kolumn), nie ma znaczenia jaki to będzie wykres.
Stwórz bazę danych sqlite3 i tabelę do której zapiszesz dane.
Zapisz dane do stworzonej tabeli.
"""

year = str(df_convert['Rok'].iloc[0])
year

import matplotlib.pyplot as plt

# grupowanie i suma wartości dla każdej sekcji
grouped_data = df_convert.groupby('Sekcje opis').sum(numeric_only=True)['Wartosc']

# sortowanie wartości i utworzenie wykresu
chart = grouped_data.sort_values().plot(kind='barh', title='Zatrudnieni wg sekcji - ' + year, xlabel='Wartość', ylabel='Sekcje', grid=True)

# zmiana formatu etykiet osi x na pełne wartości
chart.ticklabel_format(axis='x', style='plain')

# etykiety na słupkach
for index, value in enumerate(grouped_data.sort_values()):
    chart.text(value, index, f'{value:.0f}', ha='left', va='center')

plt.show()

import sqlite3

# tworzenie db
db = sqlite3.connect('zatrudnieni.db')

# tworzenie tabeli
df_convert.to_sql('zatrudnieni_sekcje_pl', db, index=True, if_exists='replace')
query = 'SELECT * FROM zatrudnieni_sekcje_pl'
df_from_db = pd.read_sql_query(query, db)

df_from_db

db.close()

